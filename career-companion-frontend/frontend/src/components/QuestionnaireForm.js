import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
// src/components/QuestionnaireForm.tsx
import { useForm, Controller } from "react-hook-form";
import { useState } from "react";
const QuestionnaireForm = () => {
    const { register, handleSubmit, control } = useForm();
    const [step, setStep] = useState(1);
    const onSubmit = (data) => {
        console.log(data);
        // Send data to backend API
        fetch("http://localhost:8000/api/questionnaire/", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
        });
    };
    return (_jsxs("form", { onSubmit: handleSubmit(onSubmit), className: "max-w-lg mx-auto p-4 relative z-10", children: [step === 1 && (_jsxs("div", { className: "space-y-4", children: [_jsx("h2", { className: "text-2xl font-bold", children: "Basic Information" }), _jsx("input", { ...register("fullName", { required: true }), placeholder: "Full Name", className: "w-full p-2 border rounded" }), _jsx("input", { ...register("email", { required: true }), type: "email", placeholder: "Email", className: "w-full p-2 border rounded" }), _jsxs("select", { ...register("ageGroup", { required: true }), className: "w-full p-2 border rounded", children: [_jsx("option", { value: "", children: "Select Age Group" }), _jsx("option", { value: "Under 16", children: "Under 16 (School Student)" }), _jsx("option", { value: "16-18", children: "16-18 (High School Student)" }), _jsx("option", { value: "19-22", children: "19-22 (College Student)" }), _jsx("option", { value: "23-25", children: "23-25 (Fresher)" }), _jsx("option", { value: "26+", children: "26+ (Professional)" })] }), _jsxs("select", { ...register("currentStatus", { required: true }), onChange: (e) => {
                            if (e.target.value === "School Student") {
                                // Handle additional input for grade
                            }
                            else if (e.target.value === "College Student") {
                                // Handle additional input for year
                            }
                            else if (e.target.value === "Professional") {
                                // Handle additional input for years of experience
                            }
                        }, className: "w-full p-2 border rounded", children: [_jsx("option", { value: "", children: "Select Current Status" }), _jsx("option", { value: "School Student", children: "School Student" }), _jsx("option", { value: "College Student", children: "College Student" }), _jsx("option", { value: "Fresher", children: "Fresher" }), _jsx("option", { value: "Professional", children: "Professional" })] }), _jsx("button", { type: "button", onClick: () => setStep(2), className: "bg-blue-500 text-text p-2 rounded", children: "Next" })] })), step === 2 && (_jsxs("div", { className: "space-y-4", children: [_jsx("h2", { className: "text-2xl font-bold", children: "Career Goals and Interests" }), _jsx("input", { ...register("dreamCareer", { required: true }), placeholder: "What is your dream career?", className: "w-full p-2 border rounded" }), _jsx(Controller, { control: control, name: "interests", render: ({ field }) => (_jsxs("select", { multiple: true, ...field, className: "w-full p-2 border rounded", children: [_jsx("option", { value: "Tech", children: "Tech" }), _jsx("option", { value: "Healthcare", children: "Healthcare" }), _jsx("option", { value: "Finance", children: "Finance" }), _jsx("option", { value: "Arts", children: "Arts" }), _jsx("option", { value: "Engineering", children: "Engineering" }), _jsx("option", { value: "Business", children: "Business" })] })) }), _jsx(Controller, { control: control, name: "skills", render: ({ field }) => (_jsx("input", { ...field, placeholder: "Skills you want to learn (comma separated)", className: "w-full p-2 border rounded" })) }), _jsxs("select", { ...register("learningTime", { required: true }), className: "w-full p-2 border rounded", children: [_jsx("option", { value: "", children: "Select Learning Time" }), _jsx("option", { value: "<5 hours", children: "<5 hours" }), _jsx("option", { value: "5-10 hours", children: "5-10 hours" }), _jsx("option", { value: "10-20 hours", children: "10-20 hours" }), _jsx("option", { value: "20+ hours", children: "20+ hours" })] }), _jsx("button", { type: "button", onClick: () => setStep(3), className: "bg-blue-500 text-text p-2 rounded", children: "Next" })] })), step === 3 && (_jsxs("div", { className: "space-y-4", children: [_jsx("h2", { className: "text-2xl font-bold", children: "Experience and Preferences" }), _jsxs("select", { ...register("priorExperience", { required: true }), className: "w-full p-2 border rounded", children: [_jsx("option", { value: "", children: "Select Prior Experience" }), _jsx("option", { value: "None", children: "None" }), _jsx("option", { value: "Basic", children: "Basic (Hobby/Self-taught)" }), _jsx("option", { value: "Intermediate", children: "Intermediate (Projects/Courses)" }), _jsx("option", { value: "Advanced", children: "Advanced (Internships/Work Experience)" })] }), _jsx("textarea", { ...register("priorExperienceDetail"), placeholder: "Describe your prior experience (if any)", className: "w-full p-2 border rounded" }), _jsx(Controller, { control: control, name: "learningStyle", render: ({ field }) => (_jsxs("select", { multiple: true, ...field, className: "w-full p-2 border rounded", children: [_jsx("option", { value: "Video Tutorials", children: "Video Tutorials" }), _jsx("option", { value: "Text-based Guides", children: "Text-based Guides" }), _jsx("option", { value: "Interactive Coding/Projects", children: "Interactive Coding/Projects" }), _jsx("option", { value: "Mentorship/Group Learning", children: "Mentorship/Group Learning" })] })) }), _jsxs("select", { ...register("aiMentorship", { required: true }), className: "w-full p-2 border rounded", children: [_jsx("option", { value: "", children: "Would you like AI-powered mentorship?" }), _jsx("option", { value: "Yes", children: "Yes" }), _jsx("option", { value: "No", children: "No" })] }), _jsx("button", { type: "button", onClick: () => setStep(4), className: "bg-blue-500 text-text p-2 rounded", children: "Next" })] })), step === 4 && (_jsxs("div", { className: "space-y-4", children: [_jsx("h2", { className: "text-2xl font-bold", children: "Additional Information" }), _jsx("textarea", { ...register("careerChallenges"), placeholder: "What are your biggest career challenges?", className: "w-full p-2 border rounded" }), _jsx("input", { ...register("toolsToMaster"), placeholder: "Any specific tools or technologies you want to master?", className: "w-full p-2 border rounded" }), _jsxs("select", { ...register("jobRecommendations", { required: true }), className: "w-full p-2 border rounded", children: [_jsx("option", { value: "", children: "Would you like to receive job/internship recommendations?" }), _jsx("option", { value: "Yes", children: "Yes" }), _jsx("option", { value: "No", children: "No" })] }), _jsx("button", { type: "submit", className: "bg-green-500 text-text p-2 rounded", children: "Submit" })] }))] }));
};
export default QuestionnaireForm;
